{"version":3,"file":"static/js/174.b8223634.chunk.js","mappings":"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","sources":["components/Button/Button.styled.js","components/FormError/FormError.styled.js","components/FormError/FormError.jsx","components/FormContacts/FormContacts.styled.js","components/FormContacts/FormContacts.jsx","pages/CreateContactPage/CreateContactPage.styled.js","pages/CreateContactPage/CreateContactPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const BtnStyled = styled.button`\n  border: none;\n  cursor: pointer;\n  width: 130px;\n  height: 30px;\n  font-weight: 600;\n  background: #ff8500;\n  color: #f6f8f9;\n  border-radius: 3px;\n  text-transform: uppercase;\n  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2),\n    0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n  &:hover {\n    background: #ea7b00;\n    color: #f6f8f9;\n  }\n`;\n","import styled from 'styled-components';\n\nexport const ContainerMessage = styled.div`\n  width: 100%;\n`\n\nexport const ErrorText = styled.p`\n  position: absolute;\n  z-index: 5;\n  color: red;\n  font-size: 14px;\n  font-style: italic;\n  grid-column: span 2;\n  justify-self: center;\n  font-weight: 400;\n  margin: 0;\n  top: 50px;\n`;\n","// import { ErrorMessage } from 'formik';\nimport { ContainerMessage, ErrorText } from './FormError.styled';\n\nexport function FormError({ message }) {\n  return (\n    <ContainerMessage>\n      <ErrorText>{message}</ErrorText>\n    </ContainerMessage>\n  );\n  // <Message name={name} render={message => <ErrorText>{message}</ErrorText>} />;\n}\n","import { BtnStyled } from 'components/Button/Button.styled.js';\nimport styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: grid;\n  justify-content: stretch;\n  row-gap: 20px;\n  padding: 15px;\n  /* width: 100%; */\n  background-color: #f8f8f8;\n  border: 2px solid #c2c2c2;\n  border-radius: 3px;\n  box-shadow: 0 4px 7px rgba(0, 0, 0, 0.25);\n`;\n\nexport const Title = styled.h2`\n  font-weight: bold;\n  font-style: italic;\n  border-bottom: 2px solid #ddd;\n  margin: 20px 0 0;\n  font-size: 22px;\n  padding-left: 40px;\n  padding-bottom: 10px;\n  color: #ff8500;\n`;\n\nexport const ContainerForm = styled.form`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-template-rows: repeat(6, 1fr);\n  grid-template-areas:\n  \"firstName avatar\"\n  \"lastName avatar\"\n  \"job_title avatar\"\n  \"user_country user_region\"\n  \"code_country address_street\"\n  \"email phone\"\n  \"button button\";\n  justify-content: center;\n  max-width: 700px;\n  padding: 20px 12px 10px 20px;\n  row-gap: 30px;\n`;\n\nexport const LabelInput = styled.label`\n  display: grid;\n  grid-area: ${props => props.htmlFor};\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  padding: 0 15px;\n  font-weight: bold;\n  font-style: italic;\n  position: relative;\n  color: #ff8500;\n    select {\n      width: 250px;\n      height: 30px;\n    }\n    .PhoneInput{\n      width: 250px;\n      .PhoneInputInput {\n        width: 100%;\n      }\n      .PhoneInputCountrySelect {\n          width: 40px;\n      }\n    }\n`;\n\nexport const ImgAvatar = styled.img`\n  grid-area: avatar;\n  width: 200px;\n  height: 200px;\n  border-radius: 50%;\n  border: 1px solid;\n  justify-self: center;\n  align-self: center;\n`;\n\nexport const InputField = styled.input`\n  border: 1px solid #c2c2c2;\n  box-shadow: 1px 1px 4px #ebebeb;\n  border-radius: 3px;\n  padding: 7px;\n  outline: none;\n  width: 250px;\n  height: 30px;\n  &:focus {\n    border: ${props => props.$mode && '1px solid red'};\n  }\n  text-transform: ${props => props.$capitalize && 'capitalize'};\n`;\n\nexport const BtnAddContacts = styled(BtnStyled)`\n  grid-area: button;\n  justify-self: end;\n`;\n","import { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Navigate } from 'react-router-dom';\nimport { useForm, Controller } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport { FormError } from '../FormError/FormError';\nimport PhoneInputWithCountry from 'react-phone-number-input/react-hook-form';\nimport { isValidPhoneNumber } from 'react-phone-number-input';\nimport {\n  CountryDropdown,\n  RegionDropdown,\n  CountryRegionData,\n} from 'react-country-region-selector';\nimport {\n  Container,\n  Title,\n  ContainerForm,\n  LabelInput,\n  InputField,\n  BtnAddContacts,\n  ImgAvatar,\n} from './FormContacts.styled';\nimport 'react-phone-number-input/style.css';\n\nconst phoneRegex =\n  /^[\\\\+]?[(]?[0-9]{3}[)]?[-\\s\\\\.]?[0-9]{3}[-\\s\\\\.]?[0-9]{4,6}$/im;\n/* supports following number formats - (123) 456-7890, (123)456-7890, 123-456-7890, 123.456.7890, 1234567890, +31636363634, 075-63546725 */\n// const phoneRegExp = /^\\+38\\s\\(\\d{3}\\)\\s(\\d{3})-(\\d{2})-(\\d{2})$/;\n\nconst validationSchema = yup.object().shape({\n  firstName: yup.string().label('First Name').trim().min(3).max(10).required(),\n  lastName: yup.string().label('Last Name').trim().min(3).max(10).required(),\n  job_title: yup.string().label('Address Street').required(),\n  user_country: yup.string().label('Country').required(),\n  user_region: yup.string().label('Region').required(),\n  code_country: yup.string().label('Code Country').required(),\n  address_street: yup.string().label('Address Street').required(),\n  email: yup.string().email().label('Email').required(),\n  phone: yup\n    .string()\n    .matches(phoneRegex, 'Phone number is not valid')\n    .required('Mobile Phone is required'),\n});\n\nconst FormContacts = ({ initialValues, onSubmit, title, textBtn }) => {\n  const {\n    handleSubmit,\n    control,\n    reset,\n    formState,\n    watch,\n    formState: { errors, isValid, isSubmitting },\n  } = useForm({\n    defaultValues: initialValues,\n    resolver: yupResolver(validationSchema),\n    mode: 'onChange',\n  });\n\n  useEffect(() => {\n    if (formState.isSubmitSuccessful) {\n      reset();\n    }\n  }, [formState.isSubmitSuccessful, reset]);\n\n  const wrapperCountryNumb = value => {\n    const codeCountry = CountryRegionData.filter(\n      item => item[0] === value\n    )[0][1];\n    return codeCountry;\n  };\n\n  return (\n    <Container>\n      {formState.isSubmitSuccessful && <Navigate to={'/contacts'} />}\n      <Title>{title}</Title>\n      <ContainerForm onSubmit={handleSubmit(onSubmit)}>\n        <Controller\n          name=\"avatar\"\n          control={control}\n          rules={{\n            required: true,\n          }}\n          render={({ field: { onChange, onBlur, value, name } }) => (\n            <LabelInput htmlFor={name}>\n              <ImgAvatar\n                name={name}\n                autoComplete=\"off\"\n                src={value}\n                onBlur={onBlur}\n                onChange={onChange}\n                autoFocus\n                $mode={errors.name}\n                $capitalize\n                type=\"text\"\n                placeholder=\"avatar\"\n              />\n\n              {errors.name && <FormError message={errors?.firstName.message} />}\n            </LabelInput>\n          )}\n        />\n        <Controller\n          name=\"firstName\"\n          control={control}\n          rules={{\n            required: true,\n          }}\n          render={({ field: { onChange, onBlur, value, name } }) => (\n            <LabelInput htmlFor=\"firstName\">\n              First Name\n              <InputField\n                name={name}\n                autoComplete=\"off\"\n                value={value}\n                onBlur={onBlur}\n                onChange={onChange}\n                autoFocus\n                $mode={errors.firstName}\n                $capitalize\n                type=\"text\"\n                placeholder=\"Enter First Name\"\n              />\n              {errors.firstName && (\n                <FormError message={errors?.firstName.message} />\n              )}\n            </LabelInput>\n          )}\n        />\n        <Controller\n          name=\"lastName\"\n          control={control}\n          rules={{\n            required: true,\n          }}\n          render={({ field: { onChange, onBlur, value } }) => (\n            <LabelInput htmlFor=\"lastName\">\n              Last Name\n              <InputField\n                name=\"lastName\"\n                autoComplete=\"off\"\n                value={value}\n                onBlur={onBlur}\n                onChange={onChange}\n                $mode={errors.lastName}\n                $capitalize\n                type=\"text\"\n                placeholder=\"Enter Last Name\"\n              />\n              {errors.lastName && (\n                <FormError message={errors?.lastName.message} />\n              )}\n            </LabelInput>\n          )}\n        />\n        <Controller\n          name=\"job_title\"\n          control={control}\n          rules={{\n            required: true,\n          }}\n          render={({ field: { onChange, onBlur, value, name } }) => (\n            <LabelInput htmlFor=\"job_title\">\n              job_title\n              <InputField\n                name={name}\n                autoComplete=\"off\"\n                value={value}\n                onBlur={onBlur}\n                onChange={onChange}\n                $mode={errors.job_title}\n                $capitalize\n                type=\"job_title\"\n                placeholder=\"Enter job title\"\n              />\n              {errors.job_title && (\n                <FormError message={errors?.job_title.message} />\n              )}\n            </LabelInput>\n          )}\n        />\n        <Controller\n          name=\"user_country\"\n          control={control}\n          rules={{\n            required: true,\n          }}\n          render={({ field: { onChange, onBlur, value, name } }) => (\n            <LabelInput htmlFor=\"user_country\">\n              Country\n              <CountryDropdown\n                name={name}\n                autoComplete=\"off\"\n                value={value}\n                onBlur={onBlur}\n                onChange={onChange}\n                $mode={errors.country}\n                type=\"text\"\n                defaultOptionLabel=\"Enter country\"\n              />\n              {errors.user_country && (\n                <FormError message={errors?.user_country.message} />\n              )}\n            </LabelInput>\n          )}\n        />\n        <Controller\n          name=\"user_region\"\n          control={control}\n          rules={{\n            required: true,\n          }}\n          render={({ field: { onChange, onBlur, value, name } }) => (\n            <LabelInput htmlFor=\"user_region\">\n              Region\n              <RegionDropdown\n                name={name}\n                autoComplete=\"off\"\n                country={watch('user_country')}\n                value={value}\n                onBlur={onBlur}\n                onChange={onChange}\n                $mode={errors.user_region}\n                type=\"text\"\n                defaultOptionLabel=\"Enter region\"\n              />\n              {errors.user_region && (\n                <FormError message={errors?.user_region.message} />\n              )}\n            </LabelInput>\n          )}\n        />\n        <Controller\n          name=\"code_country\"\n          control={control}\n          rules={{\n            required: true,\n          }}\n          render={({ field: { onChange, onBlur, value, name } }) => (\n            <LabelInput htmlFor=\"code_country\">\n              Code Country\n              <InputField\n                name={name}\n                autoComplete=\"off\"\n                value={value}\n                onBlur={onBlur}\n                onChange={onChange}\n                $mode={errors.code_country}\n                type=\"code_country\"\n                placeholder=\"Enter code country\"\n              />\n              {errors.code_country && (\n                <FormError message={errors?.code_country.message} />\n              )}\n            </LabelInput>\n          )}\n        />\n        <Controller\n          name=\"address_street\"\n          control={control}\n          rules={{\n            required: true,\n          }}\n          render={({ field: { onChange, onBlur, value, name } }) => (\n            <LabelInput htmlFor=\"address_street\">\n              Address Street\n              <InputField\n                name={name}\n                autoComplete=\"off\"\n                value={value}\n                onBlur={onBlur}\n                onChange={onChange}\n                $mode={errors.address_street}\n                type=\"address_street\"\n                placeholder=\"Enter address street\"\n              />\n              {errors.address_street && (\n                <FormError message={errors?.address_street.message} />\n              )}\n            </LabelInput>\n          )}\n        />\n        <Controller\n          name=\"phone\"\n          control={control}\n          rules={{\n            validate: value => isValidPhoneNumber(value),\n          }}\n          render={({ field: { onChange, onBlur, value, name } }) => (\n            <LabelInput htmlFor=\"phone\">\n              Phone\n              <PhoneInputWithCountry\n                name={name}\n                placeholder=\"Enter phone number\"\n                control={control}\n                rules={{ required: true }}\n                defaultCountry={\n                  watch('user_country') &&\n                  wrapperCountryNumb(watch('user_country'))\n                }\n                onChange={onChange}\n                onBlur={onBlur}\n                value={value}\n                inputComponent={InputField}\n                initialValueFormat=\"national\"\n                international={true}\n                limitMaxLength={true}\n                autoComplete=\"off\"\n                id=\"phone\"\n              />\n              {errors.phone && <FormError message={errors?.phone.message} />}\n            </LabelInput>\n          )}\n        />\n        <Controller\n          name=\"email\"\n          control={control}\n          rules={{\n            required: true,\n          }}\n          render={({ field: { onChange, onBlur, value, name } }) => (\n            <LabelInput htmlFor=\"email\">\n              Email\n              <InputField\n                name={name}\n                autoComplete=\"off\"\n                value={value}\n                onBlur={onBlur}\n                onChange={onChange}\n                $mode={errors.email}\n                type=\"email\"\n                placeholder=\"Enter Email\"\n              />\n              {errors.email && <FormError message={errors?.email.message} />}\n            </LabelInput>\n          )}\n        />\n\n        <BtnAddContacts type=\"submit\" disabled={isSubmitting || !isValid}>\n          {textBtn}\n        </BtnAddContacts>\n      </ContainerForm>\n    </Container>\n  );\n};\n\nFormContacts.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  initialValues: PropTypes.object.isRequired,\n  title: PropTypes.string.isRequired,\n  textBtn: PropTypes.string.isRequired,\n};\n\nexport default FormContacts;\n","import { BtnStyled } from 'components/Button/Button.styled';\nimport styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: grid;\n  justify-items: center;\n  row-gap: 15px;\n  width: 1080px;\n`;\nexport const ButtonGoBack = styled(BtnStyled)`\n  display: grid;\n  grid-template-columns: 20% 1fr;\n  justify-items: center;\n  align-items: center;\n  justify-self: start;\n  height: 40px;\n`;\n","import { useNavigate } from 'react-router-dom';\nimport {\n  useCreateContactMutation,\n  useGetContactsQuery,\n} from 'redux/contactsApi';\nimport FormContacts from 'components/FormContacts/FormContacts';\nimport { ButtonGoBack, Container } from './CreateContactPage.styled';\nimport { MdKeyboardBackspace } from 'react-icons/md';\nimport { toast } from 'react-toastify';\n\nconst notifyOptions = {\n  position: 'top-right',\n  autoClose: 3000,\n  hideProgressBar: false,\n  closeOnClick: true,\n  pauseOnHover: true,\n  draggable: true,\n  progress: undefined,\n  theme: 'colored',\n};\n\nconst initialValues = {\n  firstName: '',\n  lastName: '',\n  job_title: '',\n  code_country: '',\n  address_street: '',\n  user_country: '',\n  user_region: '',\n  email: '',\n  phone: '',\n};\n\nconst CreateContactPage = () => {\n  const navigate = useNavigate();\n  const [createContact] = useCreateContactMutation();\n  const { data } = useGetContactsQuery();\n\n  const addContact = ({\n    firstName,\n    lastName,\n    job_title,\n    code_country,\n    address_street,\n    user_country,\n    user_region,\n    email,\n    phone,\n  }) => {\n    const normalName = firstName.toLowerCase();\n    const checkName = data.some(\n      ({ firstName }) => firstName.toLowerCase() === normalName\n    );\n    if (checkName) {\n      toast.error(`${firstName} is already in your phone book`, notifyOptions);\n      return;\n    }\n\n    const newContact = {\n      firstName,\n      lastName,\n      job_title,\n      code_country,\n      address_street,\n      user_country,\n      user_region,\n      email,\n      phone,\n    };\n    createContact(newContact);\n    toast.success(\n      `Contact ${firstName} ${lastName} has been added to your phone book`,\n      notifyOptions\n    );\n  };\n\n  return (\n    <Container>\n      <ButtonGoBack onClick={() => navigate('/contacts')}>\n        <MdKeyboardBackspace size={30} />\n        go back\n      </ButtonGoBack>\n      <FormContacts\n        initialValues={initialValues}\n        onSubmit={addContact}\n        title=\"Create Contact\"\n        textBtn=\"submit\"\n      />\n    </Container>\n  );\n};\n\nexport default CreateContactPage;\n"],"names":["BtnStyled","styled","button","_templateObject","_taggedTemplateLiteral","ContainerMessage","div","ErrorText","p","_templateObject2","FormError","_ref","message","_jsx","children","Container","Title","h2","ContainerForm","form","_templateObject3","LabelInput","label","_templateObject4","props","htmlFor","ImgAvatar","img","_templateObject5","InputField","input","_templateObject6","$mode","$capitalize","BtnAddContacts","_templateObject7","validationSchema","yup","shape","firstName","trim","min","max","required","lastName","job_title","user_country","user_region","code_country","address_street","email","phone","matches","initialValues","onSubmit","title","textBtn","_useForm","useForm","defaultValues","resolver","yupResolver","mode","handleSubmit","control","reset","formState","watch","_useForm$formState","errors","isValid","isSubmitting","useEffect","isSubmitSuccessful","wrapperCountryNumb","value","CountryRegionData","filter","item","_jsxs","Navigate","to","Controller","name","rules","render","_ref2","_ref2$field","field","onChange","onBlur","autoComplete","src","autoFocus","type","placeholder","_ref3","_ref3$field","_ref4","_ref4$field","_ref5","_ref5$field","_ref6","_ref6$field","CountryDropdown","country","defaultOptionLabel","_ref7","_ref7$field","RegionDropdown","_ref8","_ref8$field","_ref9","_ref9$field","validate","isValidPhoneNumber","_ref10","_ref10$field","PhoneInputWithCountry","defaultCountry","inputComponent","initialValueFormat","international","limitMaxLength","id","_ref11","_ref11$field","disabled","ButtonGoBack","notifyOptions","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","navigate","useNavigate","_useCreateContactMuta","useCreateContactMutation","createContact","_slicedToArray","data","useGetContactsQuery","onClick","MdKeyboardBackspace","size","FormContacts","normalName","toLowerCase","some","toast","error","concat","success"],"sourceRoot":""}